{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setIsReversed","visGoods","goods","visibleGoods","sort","good1","good2","ALPHABET","localeCompare","LENGTH","length","reverse","console","log","getReorderedGoods","className","type","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0DAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAkCE,IAAME,EAAM,WACjB,MAAgCC,mBAASH,EAASI,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAmBMC,EAjDD,SACLC,EAAiBL,EAAmBE,GAEpC,IAAMI,EAAY,YAAOD,GAsBzB,OApBAC,EAAaC,MAAK,SAACC,EAAeC,GAChC,OAAQT,GACN,KAAKL,EAASe,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAASiB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAITX,GACFI,EAAaQ,UAIfC,QAAQC,IAAIhB,EAAUE,GAEfI,EAwBUW,CAAkBrB,EAAiBI,EAAUE,GAE9D,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAS,qCACPlB,IAAaL,EAASe,SAAW,GAAK,YACxCU,QA1BmB,WACzBnB,EAAYN,EAASe,WAqBjB,iCASA,wBACES,KAAK,SACLD,UAAS,yCACPlB,IAAaL,EAASiB,OAAS,GAAK,YACtCQ,QA/Ba,WACnBnB,EAAYN,EAASiB,SA0BjB,4BAUA,wBACEO,KAAK,SACLD,UAAS,wCACPhB,EAAa,GAAK,YACpBkB,QArCY,WAClBjB,GAAeD,IAgCX,qBASCF,IAAaL,EAASI,OAAuB,IAAfG,EAE3B,wBACEiB,KAAK,SACL,UAAQ,SACRD,UAAU,6BACVE,QA5CE,WACZnB,EAAYN,EAASI,MACrBI,GAAc,IAsCN,mBASA,MAGN,6BACGC,EAASiB,KAAI,SAACC,GAAD,OACZ,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YCvHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d189fde5.chunk.js","sourcesContent":["import { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport function getReorderedGoods(\n  goods: string[], sortType:SortType, isReversed:boolean,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((good1: string, good2: string) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return good1.localeCompare(good2);\n\n      case SortType.LENGTH:\n        return good1.length - good2.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  // eslint-disable-next-line no-console\n  console.log(sortType, isReversed);\n\n  return visibleGoods;\n}\n\nexport const App = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const sortAlphabetically = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const sortByLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const sortReverse = () => {\n    setIsReversed(!isReversed);\n  };\n\n  const reset = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  const visGoods = getReorderedGoods(goodsFromServer, sortType, isReversed);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`button is-info \n          ${sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n          onClick={sortAlphabetically}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-success  \n          ${sortType === SortType.LENGTH ? '' : 'is-light'}`}\n          onClick={sortByLength}\n\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-warning \n          ${isReversed ? '' : 'is-light'}`}\n          onClick={sortReverse}\n        >\n          Reverse\n        </button>\n\n        {sortType !== SortType.NONE || isReversed !== false\n          ? (\n            <button\n              type=\"button\"\n              data-cy=\"button\"\n              className=\"button is-danger is-light \"\n              onClick={reset}\n            >\n              Reset\n            </button>\n          )\n          : ''}\n      </div>\n\n      <ul>\n        {visGoods.map((good: string) => (\n          <li\n            key={good}\n            data-cy=\"Good\"\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}