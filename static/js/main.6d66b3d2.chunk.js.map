{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setIsReversed","visibleGoods","goods","sort","good1","good2","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","resetButton","className","type","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0DAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KA+BE,IAAME,EAAM,WACjB,MAAgCC,mBAASH,EAASI,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAmBMC,EA9CD,SACLC,EAAiBL,EAAmBE,GAEpC,IAAME,EAAY,YAAOC,GAmBzB,OAjBAD,EAAaE,MAAK,SAACC,EAAeC,GAChC,OAAQR,GACN,KAAKL,EAASc,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKb,EAASgB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAITV,GACFE,EAAaS,UAGRT,EAwBcU,CAAkBlB,EAAiBI,EAAUE,GAC5Da,EAAcf,IAAaL,EAASI,OAAuB,IAAfG,EAElD,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAS,qCACPhB,IAAaL,EAASc,SAAW,GAAK,YACxCS,QA3BmB,WACzBjB,EAAYN,EAASc,WAsBjB,iCASA,wBACEQ,KAAK,SACLD,UAAS,yCACPhB,IAAaL,EAASgB,OAAS,GAAK,YACtCO,QAhCa,WACnBjB,EAAYN,EAASgB,SA2BjB,4BASA,wBACEM,KAAK,SACLD,UAAS,wCACPd,EAAa,GAAK,YACpBgB,QArCY,WAClBf,GAAeD,IAgCX,qBASEa,GACA,wBACEE,KAAK,SACL,UAAQ,SACRD,UAAU,6BACVE,QA3CI,WACZjB,EAAYN,EAASI,MACrBI,GAAc,IAqCR,sBAWJ,6BACGC,EAAae,KAAI,SAACC,GAAD,OAChB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YClHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6d66b3d2.chunk.js","sourcesContent":["import { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport function getReorderedGoods(\n  goods: string[], sortType:SortType, isReversed:boolean,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((good1: string, good2: string) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return good1.localeCompare(good2);\n\n      case SortType.LENGTH:\n        return good1.length - good2.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const sortAlphabetically = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const sortByLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const sortReverse = () => {\n    setIsReversed(!isReversed);\n  };\n\n  const reset = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  const visibleGoods = getReorderedGoods(goodsFromServer, sortType, isReversed);\n  const resetButton = sortType !== SortType.NONE || isReversed !== false;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`button is-info \n          ${sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n          onClick={sortAlphabetically}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-success  \n          ${sortType === SortType.LENGTH ? '' : 'is-light'}`}\n          onClick={sortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-warning \n          ${isReversed ? '' : 'is-light'}`}\n          onClick={sortReverse}\n        >\n          Reverse\n        </button>\n\n        { resetButton && (\n          <button\n            type=\"button\"\n            data-cy=\"button\"\n            className=\"button is-danger is-light \"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map((good: string) => (\n          <li\n            key={good}\n            data-cy=\"Good\"\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}